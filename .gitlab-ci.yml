---
# Define the image
#image: 
#    name: "ubuntu-default"
#    pull_policy: if-not-present

# List of stages 
stages: 
- build
- test
 
variables:
    CI_REPOSITORY_URL: "https://oceandata.sci.gsfc.nasa.gov/rcs/obpg/ocssw.git"
    FF_USE_FASTZIP: "true"
    CACHE_COMPRESSION_LEVEL: "fastest"
    ARTIFACT_COMPRESSION_LEVEL: "fastest"

.build_template: &build_definition
    # Trigger a build if:
    # 1. There is a push to develop
    # 2. OR there is a merge request for develop
    # 3. OR any branch is built manually by the web UI
    rules:
    - if:  $CI_COMMIT_BRANCH == "develop" || (($CI_PIPELINE_SOURCE == 'merge_request_event') && ( $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop")) || ($CI_PIPELINE_SOURCE == 'web')
    script:
    # We have to use this path for the script because it is not installed until
    # after build, but we need to update opt/ before build (if necessary)
    - python3 $OCSSWROOT/src/manifest/install_ocssw.py --tag $(cat .manifest_tag) --install_dir $OCSSWROOT --clean --update
    - echo "Compiling the code..."
    - git submodule update --init
    - mkdir build && cd build && cmake .. -DBUILD_ALL=ON
    - if [ $? != 0 ]; then 
    -   exit 1
    - fi 
    - make -j20 && make install
    - echo "Compile complete."
    - cd ../

build-ubuntu-job:
    stage: build
    image: "ubuntu-default"
    tags: 
    - ubuntu
    # Cache build artifacts between jobs, since we only build origin/develop
    # Use a per-branch cache
    cache:
        - key: $CI_COMMIT_REF_SLUG
          paths:
          - build
          - opt
          - bin
          - lib
    before_script:
    - export OCSSWROOT=$(pwd) && source OCSSW_bash.env 
    - git clean -xfdd -e opt -e share
    - if [ ! -d opt ]; then
    -    mv /opt/opt .
    - fi
    - cd ../
    - if [ -d viirs_l1 ]; then
    -    rm -rf viirs_l1
    - fi
    - git clone --recurse-submodules https://gitlab-ci-token:${CI_JOB_TOKEN}@oceandata.sci.gsfc.nasa.gov/rcs/viirs/viirs_l1.git
    - cd viirs_l1
    - mkdir build && cd build && cmake .. -DBUILD_OCSSW_LIBS=ON && make -j20 && make install
    - cd $OCSSWROOT
    <<: *build_definition

build-centos-job:
    stage: build
    image: "centos-default"
    tags: 
    - centos
    before_script:
    - export OCSSWROOT=$(pwd) && source OCSSW_bash.env 
    - source /opt/rh/devtoolset-9/enable
    - PATH=/opt/cmake-3.24.0-linux-x86_64/bin:$PATH
    - git clean -xfdd -e opt -e share
    - if [ ! -d opt ]; then
    -    mv /opt/opt .
    - fi
    - cd ../
    - if [ -d centos_viirs_l1 ]; then
    -    rm -rf centos_viirs_l1
    - fi
    - git clone --recurse-submodules https://gitlab-ci-token:${CI_JOB_TOKEN}@oceandata.sci.gsfc.nasa.gov/rcs/viirs/viirs_l1.git centos_viirs_l1
    - cd centos_viirs_l1 
    - mkdir build && cd build && cmake .. -DBUILD_OCSSW_LIBS=ON && make -j20 && make install
    - cd $OCSSWROOT
    <<: *build_definition

build-macos-job:
    stage: build
    tags:
    - macos
    before_script:
    - export CC=gcc-12 && export CXX=g++-12 && export FC=gfortran-12 && NM=gcc-nm-12 && export LD=gcc-12 && export AR=gcc-ar-12 && export RANLIB=gcc-ranlib-12
    - export PATH=/opt/homebrew/bin:/opt/homebrew/sbin:$PATH
    - export OCSSWROOT=$(pwd) && source OCSSW_bash.env 
    - git clean -xfdd -e opt -e share
    - if [ ! -d opt ]; then
    -    cp ~/.opt.tar .
    -    tar xf .opt.tar
    - fi
    - cd ../
    - if [ -d viirs_l1 ]; then
    -    rm -rf viirs_l1
    - fi
    - git clone --recurse-submodules https://gitlab-ci-token:${CI_JOB_TOKEN}@oceandata.sci.gsfc.nasa.gov/rcs/viirs/viirs_l1.git
    - cd viirs_l1 
    - mkdir build && cd build && cmake .. -DBUILD_OCSSW_LIBS=ON && make -j20 && make install
    - cd $OCSSWROOT
    <<: *build_definition

test-job:
    stage: test
    image: "ubuntu-default"
    tags: 
    - ubuntu
    cache:
        - key: $CI_COMMIT_REF_SLUG
          paths:
          - build
          - opt
          - bin
          - lib
    before_script:
    - export OCSSWROOT=$(pwd) && source OCSSW_bash.env 
    rules:
    - if:  $CI_COMMIT_BRANCH == "develop" || (($CI_PIPELINE_SOURCE == 'merge_request_event') && ( $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop")) || ($CI_PIPELINE_SOURCE == 'web')
    script:
    - git submodule update --init
    - if [ ! -d share ]; then
    -    if [ -d /data/share ]; then
    -        mv /data/share .
    -        cd build && make update
    -    else
    -        install_ocssw --tag $(cat .manifest_tag) --install_dir $OCSSWROOT --all
    -        cd build
    -    fi
    - else
    -    cd build && make update
    - fi
    - echo "Running tests..."
    - ctest -R "data"
    - cmake ..
    - ctest -R "output"
    - ctest -j8 -E "output|data" || true
    - if [ ! -d /data/share ]; then
         mv ../share /data/
    - fi
    - if [ -f Testing/Temporary/LastTestsFailed.log ]; then
    -  $OCSSWROOT/oel_util/cmake/Modules/cdata-lt --raw
    -  exit 1
    - fi
    - exit 0
